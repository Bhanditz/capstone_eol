#sidebar
  .collection_list
    %h3= I18n.t(:community_focus)
    - if @community.focus.nil?
      .empty
        %p= I18n.t(:this_community_has_no_focus_list)
    - else
      %ul
        = render :partial => 'collections/collection_summary', :locals => {:collection => @community.focus, :minimal => true}
  .collection_list
    %h3= I18n.t(:endorsed_collections)
    - if @community_collections.empty?
      .empty
        %p
          = I18n.t(:this_community_has_no_endorsed_collections)
          - if @current_member && @current_member.manager?
            = I18n.t(:manager_endorse_collections_suggestion)
    - else
      %ul
        - @community_collections[0..3].each do |ci|
          = render :partial => 'collections/collection_summary', :locals => {:collection => ci.object, :minimal => true}
  = render :partial => 'communities/active_members_sidebar'
#community.main_container
  .article.list.updates
    = render :partial => 'comments/new', :locals => { :parent => @community }
    .newsfeed_heading
      %h3= I18n.t(:newsfeed)
    -# The #reject on this next line is a TEMP workaround to remove activities that are not actually from this collection. I think that's a data problem, but until we
    -# TODO check on that, I don't want to allow other collections' logs here:
    - featured_ids = @community.collection.collection_items.collections.map(&:id)
    = render :partial => 'activity_logs/index', :locals => {:log => @newsfeed.reject {|h| l = h['instance'] ; l.respond_to?(:community_id) && l.community_id != @community.id && ! featured_ids.include?(@community.id) } }

