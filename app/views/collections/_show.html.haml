- editable = collection.editable_by?(current_user)
- #TODO refer to older commit e.g. 5f64447fe0c1ac9b78c3 when need to reimplement editable actions and forms
#tabs_sidebar
  -#FIXME: active tab needs to be functional, and counts real, move to controller(?)
  %ul.tabs.with_icons

    - attrib = 'total'
    - attrib << ' active' if !params[:filter]
    %li{:class => attrib}= link_to I18n.t(:total_items_with_count, :count => @collection.collection_items.count), "/collections/#{params[:id]}/"

    - taxa_count = @collection.filter_type("taxa").compact.count
    - articles_count = @collection.filter_type("articles").compact.count
    - videos_count = @collection.filter_type("videos").compact.count
    - images_count = @collection.filter_type("images").compact.count
    - sounds_count = @collection.filter_type("sounds").compact.count
    - communities_count = @collection.filter_type("communities").compact.count
    - people_count = @collection.filter_type("people").compact.count
    - collections_count = @collection.filter_type("collections").compact.count

    - types = [{"count" => taxa_count,        "type" => "taxa",        "link" => "taxa_with_count"},
               {"count" => articles_count,    "type" => "articles",    "link" => "articles_with_count"},
               {"count" => videos_count,      "type" => "videos",      "link" => "videos_with_count"},
               {"count" => images_count,      "type" => "images",      "link" => "images_with_count"},
               {"count" => sounds_count,      "type" => "sounds",      "link" => "sounds_with_count"},
               {"count" => communities_count, "type" => "communities", "link" => "communities_with_count"},
               {"count" => people_count,      "type" => "people",      "link" => "people_with_count"},
               {"count" => collections_count, "type" => "collections", "link" => "collections_with_count"}]

    - types.each do |t|
      - attrib = t['type']
      - attrib << ' active' if params[:filter] == t['type']
      %li{:class => attrib}= link_to I18n.t(:"#{t['link']}", :count => t['count']), "/collections/#{params[:id]}/#{t['type']}"
#sidebar
  .filters
    - form_tag({}) do
      %h4= I18n.t(:collect_items)
      %fieldset.actions
        %button.select_all= I18n.t(:select_all_button)
        = submit_tag I18n.t(:copy_selected_button)
  .collection_contributors
    %h3= I18n.t(:managed_by)
    %ul
      %li
        - if collection.community_id
          = link_to image_tag(collection.community.logo_url, :alt => ""), community_path(collection.community)
          %h4= link_to collection.community.name, community_path(collection.community)
        - elsif collection.user_id
          = link_to image_tag(collection.user.logo_url(:small), :alt => ''), user_path(collection.user_id)
          %h4= link_to collection.user.full_name, user_path(collection.user_id)
          %p= collection.user.credentials
  - if @collection.collection_endorsements.count > 0
    .collection_contributors
      %h3= I18n.t(:endorsed_by)
      %ul
        - #FIXME: guessed at methods for listing endorsed by - needs implementing properly and testing with data.
        - @collection.collection_endorsements.each do |e|
          %li
            = link_to image_tag(e.member.user.logo_url(:small), :alt => ''), user_path(e.member.user)
            - #TODO: Is given name required field? What happens if its nil?
            %h4= link_to e.member.user.given_name, user_path(e.member.user.id)
            - #FIXME users need a tag line %p= e.member.user.???
            %h4= link_to e.community.name, community_path(e.community)
            %p= I18n.t(:members_with_count, :count => e.community.members.count)

#collections.main_container
  .heading
    - # TODO: use the shared partial and fix css for this form
    - # FIXME: Make sure the the controller can handle the sort params
    - form_tag({}, :method => 'GET') do
      = label_tag :sort_by, I18n.t(:sort_by_label)
      - selected = params[:sort_by].nil? ? :newest : params[:sort_by].to_sym
      - sort_options = { I18n.t(:sort_by_newest_option) => :newest, I18n.t(:sort_by_oldest_option) => :oldest }
      = select_tag :sort_by, options_for_select(sort_options, selected)
      = submit_tag I18n.t(:sort_by_button)
  %ul.object_list
    - @collection_items.each do |item|
      = render :partial => 'collection_items/show', :locals => { :collection_item => item, :editable => editable }
